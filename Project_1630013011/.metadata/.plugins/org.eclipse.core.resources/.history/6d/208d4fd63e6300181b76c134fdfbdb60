import java.util.ArrayList;

public class Bank {
	private String name;
	private ArrayList<IAccount> accounts;
	private ArrayList<ModelListener> modelListeners;
	
	// initializes bank's name, accounts and model listeners
	public Bank(String name) {
		this.name = name;
		accounts = new ArrayList<>();
		modelListeners = new ArrayList<>();
	}
	
	//Add an account
	public void addAccount(IAccount account) {
		accounts.add(account);
		notifyListeners();
	}
	
	//Calculate total money
	public int totalMoney() {
		int total = 0;
		for(IAccount i : accounts) {
			total += i.getMoney();
		}
		return total;
	}
	
	/* Get the account's money*/
	public int getMoney(String name) throws UnknownCustomerException {
		for(IAccount i : accounts) {
			if (i.getName().equals(name)) {
				return i.getMoney();
			}
		}
		throw new UnknownCustomerException("Customer " + name + " unknown");
	}
	
	//Withdraw money
	public void withdraw(String name, int amount) throws UnknownCustomerException {
		for(IAccount i : accounts) {
			if(i.getName().equals(name)) {
				try {
					i.withdraw(amount);
					notifyListeners();
				} catch (NotEnoughMoneyException e) {
					System.out.println(e.getMessage());
				}
			}
		}
		throw new UnknownCustomerException("Customer " + name + " unknown");
	}
	
	//Add a model listener
	public void addListener(ModelListener m) {
		modelListeners.add(m);
	}
	
	//Notify listeners
	private void notifyListeners() {
		for(ModelListener m : modelListeners) {
			m.update();
		}
	}
	
	//testing
	public static void testBank() {
		// a bank named ABC
				Bank a = new Bank("ABC");
				// the bank have two users
				a.addAccount(new CreditAccount("harry", 10000));
				a.addAccount(new StudentAccount("kelvin", 20000));
				// get total money of the bank 30000
				System.out.println(a.totalMoney() == 30000);
				// kelvin has 20000
				try {
					System.out.println(a.getMoney("kelvin") == 20000);
				} catch (UnknownCustomerException e) {
					System.out.println(e.getMessage());
				}
				// kelvin withdraw 10000
				try {
					a.withdraw("kelvin", 10000);
				} catch (UnknownCustomerException | NotEnoughMoneyException e) {
					System.out.println(e.getMessage());
				}
				// kelvin has 20000 - 10000 = 10000
				try {
					System.out.println(a.getMoney("kelvin") == 10000);
				} catch (UnknownCustomerException e) {
					System.out.println(e.getMessage());
				}

				// exception test
				try {
					a.getMoney("aaa");
				} catch (UnknownCustomerException e) {
					System.out.println(e.getMessage());
				}

				try {
					a.withdraw("bbb", 1200);
				} catch (UnknownCustomerException | NotEnoughMoneyException e) {
					System.out.println(e.getMessage());
				}
	}
}